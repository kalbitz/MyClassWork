//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NuttinButCDs.MusicServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Album", Namespace="http://musicservice.xpdt.com/")]
    [System.SerializableAttribute()]
    public partial class Album : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NuttinButCDs.MusicServiceReference.Artist ArtistField;
        
        private System.DateTime ReleaseDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LargeImageUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SmallImageUrlField;
        
        private int NumberOfDiscsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NuttinButCDs.MusicServiceReference.Disk[] DisksField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public NuttinButCDs.MusicServiceReference.Artist Artist {
            get {
                return this.ArtistField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtistField, value) != true)) {
                    this.ArtistField = value;
                    this.RaisePropertyChanged("Artist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=2)]
        public System.DateTime ReleaseDate {
            get {
                return this.ReleaseDateField;
            }
            set {
                if ((this.ReleaseDateField.Equals(value) != true)) {
                    this.ReleaseDateField = value;
                    this.RaisePropertyChanged("ReleaseDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public string LargeImageUrl {
            get {
                return this.LargeImageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.LargeImageUrlField, value) != true)) {
                    this.LargeImageUrlField = value;
                    this.RaisePropertyChanged("LargeImageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public string SmallImageUrl {
            get {
                return this.SmallImageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.SmallImageUrlField, value) != true)) {
                    this.SmallImageUrlField = value;
                    this.RaisePropertyChanged("SmallImageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=6)]
        public int NumberOfDiscs {
            get {
                return this.NumberOfDiscsField;
            }
            set {
                if ((this.NumberOfDiscsField.Equals(value) != true)) {
                    this.NumberOfDiscsField = value;
                    this.RaisePropertyChanged("NumberOfDiscs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=7)]
        public NuttinButCDs.MusicServiceReference.Disk[] Disks {
            get {
                return this.DisksField;
            }
            set {
                if ((object.ReferenceEquals(this.DisksField, value) != true)) {
                    this.DisksField = value;
                    this.RaisePropertyChanged("Disks");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Artist", Namespace="http://musicservice.xpdt.com/")]
    [System.SerializableAttribute()]
    public partial class Artist : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Disk", Namespace="http://musicservice.xpdt.com/")]
    [System.SerializableAttribute()]
    public partial class Disk : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NuttinButCDs.MusicServiceReference.Track[] TracksField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public NuttinButCDs.MusicServiceReference.Track[] Tracks {
            get {
                return this.TracksField;
            }
            set {
                if ((object.ReferenceEquals(this.TracksField, value) != true)) {
                    this.TracksField = value;
                    this.RaisePropertyChanged("Tracks");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Track", Namespace="http://musicservice.xpdt.com/")]
    [System.SerializableAttribute()]
    public partial class Track : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        private int IndexField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=1)]
        public int Index {
            get {
                return this.IndexField;
            }
            set {
                if ((this.IndexField.Equals(value) != true)) {
                    this.IndexField = value;
                    this.RaisePropertyChanged("Index");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://musicservice.xpdt.com/", ConfigurationName="MusicServiceReference.MusicServiceSoap")]
    public interface MusicServiceSoap {
        
        // CODEGEN: Generating message contract since element name artist from namespace http://musicservice.xpdt.com/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://musicservice.xpdt.com/FindAlbumsByArtist", ReplyAction="*")]
        NuttinButCDs.MusicServiceReference.FindAlbumsByArtistResponse FindAlbumsByArtist(NuttinButCDs.MusicServiceReference.FindAlbumsByArtistRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://musicservice.xpdt.com/FindAlbumsByArtist", ReplyAction="*")]
        System.IAsyncResult BeginFindAlbumsByArtist(NuttinButCDs.MusicServiceReference.FindAlbumsByArtistRequest request, System.AsyncCallback callback, object asyncState);
        
        NuttinButCDs.MusicServiceReference.FindAlbumsByArtistResponse EndFindAlbumsByArtist(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class FindAlbumsByArtistRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="FindAlbumsByArtist", Namespace="http://musicservice.xpdt.com/", Order=0)]
        public NuttinButCDs.MusicServiceReference.FindAlbumsByArtistRequestBody Body;
        
        public FindAlbumsByArtistRequest() {
        }
        
        public FindAlbumsByArtistRequest(NuttinButCDs.MusicServiceReference.FindAlbumsByArtistRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://musicservice.xpdt.com/")]
    public partial class FindAlbumsByArtistRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string artist;
        
        public FindAlbumsByArtistRequestBody() {
        }
        
        public FindAlbumsByArtistRequestBody(string artist) {
            this.artist = artist;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class FindAlbumsByArtistResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="FindAlbumsByArtistResponse", Namespace="http://musicservice.xpdt.com/", Order=0)]
        public NuttinButCDs.MusicServiceReference.FindAlbumsByArtistResponseBody Body;
        
        public FindAlbumsByArtistResponse() {
        }
        
        public FindAlbumsByArtistResponse(NuttinButCDs.MusicServiceReference.FindAlbumsByArtistResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://musicservice.xpdt.com/")]
    public partial class FindAlbumsByArtistResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public NuttinButCDs.MusicServiceReference.Album[] FindAlbumsByArtistResult;
        
        public FindAlbumsByArtistResponseBody() {
        }
        
        public FindAlbumsByArtistResponseBody(NuttinButCDs.MusicServiceReference.Album[] FindAlbumsByArtistResult) {
            this.FindAlbumsByArtistResult = FindAlbumsByArtistResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface MusicServiceSoapChannel : NuttinButCDs.MusicServiceReference.MusicServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindAlbumsByArtistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindAlbumsByArtistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NuttinButCDs.MusicServiceReference.Album[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NuttinButCDs.MusicServiceReference.Album[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MusicServiceSoapClient : System.ServiceModel.ClientBase<NuttinButCDs.MusicServiceReference.MusicServiceSoap>, NuttinButCDs.MusicServiceReference.MusicServiceSoap {
        
        private BeginOperationDelegate onBeginFindAlbumsByArtistDelegate;
        
        private EndOperationDelegate onEndFindAlbumsByArtistDelegate;
        
        private System.Threading.SendOrPostCallback onFindAlbumsByArtistCompletedDelegate;
        
        public MusicServiceSoapClient() {
        }
        
        public MusicServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MusicServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MusicServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MusicServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<FindAlbumsByArtistCompletedEventArgs> FindAlbumsByArtistCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        NuttinButCDs.MusicServiceReference.FindAlbumsByArtistResponse NuttinButCDs.MusicServiceReference.MusicServiceSoap.FindAlbumsByArtist(NuttinButCDs.MusicServiceReference.FindAlbumsByArtistRequest request) {
            return base.Channel.FindAlbumsByArtist(request);
        }
        
        public NuttinButCDs.MusicServiceReference.Album[] FindAlbumsByArtist(string artist) {
            NuttinButCDs.MusicServiceReference.FindAlbumsByArtistRequest inValue = new NuttinButCDs.MusicServiceReference.FindAlbumsByArtistRequest();
            inValue.Body = new NuttinButCDs.MusicServiceReference.FindAlbumsByArtistRequestBody();
            inValue.Body.artist = artist;
            NuttinButCDs.MusicServiceReference.FindAlbumsByArtistResponse retVal = ((NuttinButCDs.MusicServiceReference.MusicServiceSoap)(this)).FindAlbumsByArtist(inValue);
            return retVal.Body.FindAlbumsByArtistResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NuttinButCDs.MusicServiceReference.MusicServiceSoap.BeginFindAlbumsByArtist(NuttinButCDs.MusicServiceReference.FindAlbumsByArtistRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindAlbumsByArtist(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFindAlbumsByArtist(string artist, System.AsyncCallback callback, object asyncState) {
            NuttinButCDs.MusicServiceReference.FindAlbumsByArtistRequest inValue = new NuttinButCDs.MusicServiceReference.FindAlbumsByArtistRequest();
            inValue.Body = new NuttinButCDs.MusicServiceReference.FindAlbumsByArtistRequestBody();
            inValue.Body.artist = artist;
            return ((NuttinButCDs.MusicServiceReference.MusicServiceSoap)(this)).BeginFindAlbumsByArtist(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        NuttinButCDs.MusicServiceReference.FindAlbumsByArtistResponse NuttinButCDs.MusicServiceReference.MusicServiceSoap.EndFindAlbumsByArtist(System.IAsyncResult result) {
            return base.Channel.EndFindAlbumsByArtist(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public NuttinButCDs.MusicServiceReference.Album[] EndFindAlbumsByArtist(System.IAsyncResult result) {
            NuttinButCDs.MusicServiceReference.FindAlbumsByArtistResponse retVal = ((NuttinButCDs.MusicServiceReference.MusicServiceSoap)(this)).EndFindAlbumsByArtist(result);
            return retVal.Body.FindAlbumsByArtistResult;
        }
        
        private System.IAsyncResult OnBeginFindAlbumsByArtist(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string artist = ((string)(inValues[0]));
            return this.BeginFindAlbumsByArtist(artist, callback, asyncState);
        }
        
        private object[] OnEndFindAlbumsByArtist(System.IAsyncResult result) {
            NuttinButCDs.MusicServiceReference.Album[] retVal = this.EndFindAlbumsByArtist(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindAlbumsByArtistCompleted(object state) {
            if ((this.FindAlbumsByArtistCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindAlbumsByArtistCompleted(this, new FindAlbumsByArtistCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindAlbumsByArtistAsync(string artist) {
            this.FindAlbumsByArtistAsync(artist, null);
        }
        
        public void FindAlbumsByArtistAsync(string artist, object userState) {
            if ((this.onBeginFindAlbumsByArtistDelegate == null)) {
                this.onBeginFindAlbumsByArtistDelegate = new BeginOperationDelegate(this.OnBeginFindAlbumsByArtist);
            }
            if ((this.onEndFindAlbumsByArtistDelegate == null)) {
                this.onEndFindAlbumsByArtistDelegate = new EndOperationDelegate(this.OnEndFindAlbumsByArtist);
            }
            if ((this.onFindAlbumsByArtistCompletedDelegate == null)) {
                this.onFindAlbumsByArtistCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindAlbumsByArtistCompleted);
            }
            base.InvokeAsync(this.onBeginFindAlbumsByArtistDelegate, new object[] {
                        artist}, this.onEndFindAlbumsByArtistDelegate, this.onFindAlbumsByArtistCompletedDelegate, userState);
        }
    }
}
